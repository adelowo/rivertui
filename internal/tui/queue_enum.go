// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package tui

import (
	"errors"
	"fmt"
)

const (
	// QueueStatusPaused is a QueueStatus of type paused.
	QueueStatusPaused QueueStatus = "paused"
	// QueueStatusActive is a QueueStatus of type active.
	QueueStatusActive QueueStatus = "active"
)

var ErrInvalidQueueStatus = errors.New("not a valid QueueStatus")

// String implements the Stringer interface.
func (x QueueStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x QueueStatus) IsValid() bool {
	_, err := ParseQueueStatus(string(x))
	return err == nil
}

var _QueueStatusValue = map[string]QueueStatus{
	"paused": QueueStatusPaused,
	"active": QueueStatusActive,
}

// ParseQueueStatus attempts to convert a string to a QueueStatus.
func ParseQueueStatus(name string) (QueueStatus, error) {
	if x, ok := _QueueStatusValue[name]; ok {
		return x, nil
	}
	return QueueStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidQueueStatus)
}
